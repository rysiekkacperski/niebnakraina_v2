rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /users/{documentId} {
      // For create operations, use request.resource.data
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId;
  
      // For read, update, and delete operations, you can still check against resource.data
      allow read, update: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }

    match /patients/{documentId} {
      // For create operations, use request.resource.data
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.ownerId;
  
      // For read, update, and delete operations, you can still check against resource.data
      allow read: if request.auth != null 
        && request.auth.uid == resource.data.ownerId;
    }

    match /category/{document=**} {
      allow read: if true
    }

    match /product/{document=**} {
      allow read: if true
    }
    
    match /visitMode/{document=**} {
      allow read: if true
    }

    match /dateSlots/{slotId} {
      // Only authenticated users can read documents.
      allow read: if request.auth != null;

      // Allow updates only if the only field being changed is currentlyOccupyingUser.
      allow update: if request.auth != null
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['currentlyOccupyingUser']);
    }

  }
}